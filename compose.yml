

services:

  so1:
    networks:
      splunknet:
      minionet:
    image: ${SPLUNK_IMAGE:-splunk/splunk:latest}
    platform: linux/amd64
    hostname: so1
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_STANDALONE_URL=so1
      - SPLUNK_PASSWORD
      - TZ
    ports:
      - 8000:8000
    volumes:
      # - so1-var:/opt/splunk/var
      # - so1-etc:/opt/splunk/etc
      - ./configs/splunk/so1.yml:/tmp/defaults/default.yml

  ds1:
    networks:
      splunknet:
    image: ${SPLUNK_IMAGE:-splunk/splunk:latest}
    platform: linux/amd64
    hostname: ds1
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_ROLE=splunk_deployment_server
      - SPLUNK_APPS_URL=/opt/my-apps/normal.spl,/opt/my-apps/double-speed.spl,/opt/my-apps/unlimited-speed.spl
      - SPLUNK_STANDALONE_URL=so1
      - SPLUNK_PASSWORD
      - TZ
    volumes:
      - ./configs/splunk/ds1.yml:/tmp/defaults/default.yml
      - ./my-apps:/opt/my-apps
    ports:
      - 8001:8000

  uf0:
    networks:
      splunknet:
    image: ${UF_IMAGE:-splunk/universalforwarder:latest}
    platform: linux/amd64
    hostname: uf0
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_ADD=monitor /var/log/*
      - SPLUNK_PASSWORD
      - TZ
    volumes:
      - ./configs/splunk/uf.yml:/tmp/defaults/default.yml
    depends_on:
      ds1:
        condition: service_healthy
        restart: true

  uf1:
    networks:
      splunknet:
    image: ${UF_IMAGE:-splunk/universalforwarder:latest}
    platform: linux/amd64
    hostname: uf1
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_ADD=monitor /var/log/*
      - SPLUNK_PASSWORD
      - TZ
    volumes:
      - ./configs/splunk/uf.yml:/tmp/defaults/default.yml
    depends_on:
      ds1:
        condition: service_healthy
        restart: true

  uf2:
    networks:
      splunknet:
    image: ${UF_IMAGE:-splunk/universalforwarder:latest}
    platform: linux/amd64
    hostname: uf2
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_ADD=monitor /var/log/*
      - SPLUNK_PASSWORD
      - TZ
    volumes:
      - ./configs/splunk/uf.yml:/tmp/defaults/default.yml
    depends_on:
      ds1:
        condition: service_healthy
        restart: true

  minio:
    networks:
      minionet:
    image: minio/minio
    platform: linux/amd64
    environment:
      MINIO_ROOT_USER:
      MINIO_ROOT_PASSWORD:
      TZ:
    command: server --console-address ":9001" /data --certs-dir /certs
    hostname: minio
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - minio-data:/data
      - ./certs:/certs
    ports:
      - 9001:9001
    restart:
      always

  minio-init:
    image: minio/mc
    platform: linux/amd64
    environment:
      MINIO_SERVER: ${MINIO_SERVER:-minio}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      AWS_ACCESS_KEY_ID: ${INGEST_ACTION_AK}
      AWS_SECRET_ACCESS_KEY: ${INGEST_ACTION_SK}
    networks:
      minionet:
    entrypoint: ./scripts/minio-init.sh
    volumes:
      - ./scripts:/scripts:ro
    depends_on:
      minio:
        condition: service_healthy
        restart: true


networks:
  splunknet:
    driver: bridge
    attachable: true
  minionet:
    driver: bridge
    attachable: true

volumes:
  # so1-var:
  # so1-etc:
  minio-data: